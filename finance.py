# -*- coding: utf-8 -*-
"""Finance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZhpNfUwqnOeldSIVUDjJRvTtOkejZ1p9
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

# Set up page
st.set_page_config(page_title="My Finance Dashboard", layout="wide")
st.title("My Personal Finance Dashboard")
st.markdown("Track your income, expenses, and budget in a simple, visual way.")

# Upload
uploaded_file = st.file_uploader("Upload your bank transactions CSV file", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df = df.dropna(subset=['Date'])
    df['Month'] = df['Date'].dt.to_period('M')

    # Auto-categorize
    def categorize(component):
        component = str(component).lower()
        if any(x in component for x in ['grocery', 'food', 'supermarket']):
            return 'Food'
        elif 'rent' in component:
            return 'Rent'
        elif any(x in component for x in ['uber', 'taxi', 'bus']):
            return 'Transport'
        elif any(x in component for x in ['netflix', 'movie', 'tv', 'spotify']):
            return 'Entertainment'
        else:
            return 'Other'

    df['Category'] = df['Component'].apply(categorize)

    # Show uploaded data preview
    st.markdown("### Uploaded Transactions")
    st.dataframe(df[['Date', 'Type', 'Component', 'Value']].head(10))

    # Basic summary
    st.markdown("### Monthly Income and Expense Trends")
    monthly = df.groupby(['Month', 'Type'])['Value'].sum().unstack().fillna(0)
    if not monthly.empty:
        st.line_chart(monthly)
    else:
        st.info("Not enough data for monthly trends.")

    # Total income & expense
    income = df[df['Type'] == 'Income']['Value'].sum()
    expense = df[df['Type'] == 'Expense']['Value'].sum()
    savings = income - expense
    col1, col2, col3 = st.columns(3)
    col1.metric("Total Income", f"${income:,.2f}")
    col2.metric("Total Expense", f"${expense:,.2f}")
    col3.metric("Net Savings", f"${savings:,.2f}", delta_color="inverse")

    # Pie chart - Spending breakdown
    st.markdown("### Where Your Money Went (Spending Categories)")
    category_sum = df[df['Type'] == 'Expense'].groupby('Category')['Value'].sum()
    if not category_sum.empty:
        fig, ax = plt.subplots()
        ax.pie(category_sum, labels=category_sum.index, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        st.pyplot(fig)
    else:
        st.info("No expense data available to plot categories.")

    # Budgets (fixed)
    budgets = {'Food': 500, 'Rent': 1200, 'Transport': 150, 'Entertainment': 100, 'Other': 200}

    # Monthly expense by category
    st.markdown("### Budget Alerts")
    expense_df = df[df['Type'] == 'Expense']
    monthly_expense = expense_df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)

    alerts = []
    for month in monthly_expense.index:
        for cat in monthly_expense.columns:
            spent = monthly_expense.loc[month, cat]
            budget = budgets.get(cat, 0)
            if spent > budget:
                alerts.append(f"In {month.strftime('%B %Y')}, you spent ${spent - budget:.2f} more than your budget in **{cat}**.")

    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("You stayed within your budget in all categories.")

    # Downloadable monthly summary
    st.markdown("### Download Monthly Summary Report")
    monthly_summary = df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)
    csv_buffer = BytesIO()
    monthly_summary.to_csv(csv_buffer)
    st.download_button("Download CSV Report", csv_buffer.getvalue(), "monthly_summary.csv", "text/csv")

else:
    st.info("Upload your CSV to get started. Your file should include columns: Date, Type, Component, and Value.")

