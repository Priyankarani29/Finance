# -*- coding: utf-8 -*-
"""Finance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZhpNfUwqnOeldSIVUDjJRvTtOkejZ1p9
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

# Set page config
st.set_page_config(page_title="Personal Finance Dashboard", layout="wide")
st.title("Personal Finance Dashboard")
st.markdown("Upload your bank transactions file (CSV). This dashboard will help you understand your income, expenses, and how you're doing with your budget.")

# Upload CSV
uploaded_file = st.file_uploader("Upload your CSV file", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df = df.dropna(subset=['Date'])
    df['Month'] = df['Date'].dt.to_period('M')

    # Auto-categorize expenses
    def categorize(component):
        component = str(component).lower()
        if 'food' in component or 'grocery' in component:
            return 'Food'
        elif 'rent' in component:
            return 'Rent'
        elif any(x in component for x in ['uber', 'taxi', 'bus']):
            return 'Transport'
        elif any(x in component for x in ['netflix', 'movie', 'tv']):
            return 'Entertainment'
        else:
            return 'Other'

    df['Category'] = df['Component'].apply(categorize)

    # Fixed monthly budgets
    budgets = {
        'Food': 500,
        'Rent': 1200,
        'Transport': 150,
        'Entertainment': 100,
        'Other': 200
    }

    # Display uploaded data
    st.markdown("### Uploaded Data Preview")
    st.dataframe(df.head(20))

    # Show breakdown of how data was categorized
    st.markdown("### Category Summary")
    st.write(df['Category'].value_counts())

    # Financial summary
    st.markdown("### Overall Financial Summary")
    total_income = df[df['Type'] == 'Income']['Value'].sum()
    total_expense = df[df['Type'] == 'Expense']['Value'].sum()
    net_savings = total_income - total_expense

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Income", f"${total_income:,.2f}")
    col2.metric("Total Expense", f"${total_expense:,.2f}")
    col3.metric("Net Savings", f"${net_savings:,.2f}", delta_color="inverse")

    # Monthly trend
    st.markdown("### Monthly Income and Expense Trends")
    monthly_trend = df.groupby(['Month', 'Type'])['Value'].sum().unstack().fillna(0)

    if len(monthly_trend) < 2:
        st.warning("Only one month of data available. Add more months to see trends.")
    else:
        st.line_chart(monthly_trend)

    # Monthly expenses by category
    st.markdown("### Spending vs Budget")
    expense_df = df[df['Type'] == 'Expense']
    monthly_expense = expense_df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)

    # Build budget DataFrame
    budget_df = pd.DataFrame([budgets], index=monthly_expense.index)
    budget_df = budget_df.reindex(columns=monthly_expense.columns, fill_value=0)
    alerts = (monthly_expense > budget_df).astype(int)

    if monthly_expense.empty:
        st.info("No expenses available to compare with budgets.")
    else:
        for category in monthly_expense.columns:
            st.markdown(f"**{category}**")
            fig, ax = plt.subplots(figsize=(8, 3))
            ax.plot(monthly_expense.index.to_timestamp(), monthly_expense[category], marker='o', label='Your Spending')
            ax.axhline(y=budgets.get(category, 0), color='red', linestyle='--', label='Budget')
            ax.set_title(f"{category} - Spending vs Budget")
            ax.set_ylabel("Amount ($)")
            ax.legend()
            st.pyplot(fig)

    # Budget alert table
    st.markdown("### Budget Alert Table")
    st.markdown("Red cells indicate categories where you spent more than your monthly budget.")
    st.dataframe(alerts.style.applymap(lambda x: "background-color: red" if x == 1 else ""))

    # Downloadable summary
    st.markdown("### Download Monthly Report")
    summary = df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)
    buffer = BytesIO()
    summary.to_csv(buffer)
    st.download_button("Download Summary CSV", buffer.getvalue(), "monthly_summary.csv", "text/csv")
else:
    st.info("Please upload a CSV file to begin. It should include columns like: Date, Type, Component, and Value.")
