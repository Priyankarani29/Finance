# -*- coding: utf-8 -*-
"""Finance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZhpNfUwqnOeldSIVUDjJRvTtOkejZ1p9
"""

import pandas as pd


#Display the first few rows
df.head()

# Display number of rows and columns
print(f"Number of rows: {df.shape[0]}")
print(f"Number of columns: {df.shape[1]}")

# Display column names
print("\nColumn names:")
print(df.columns.tolist())

# Value distribution by type
print(df['Type'].value_counts())

# Total value by Type
print(df.groupby('Type')['Value'].sum())

# Spending by Component
df.groupby('Component')['Value'].sum().sort_values(ascending=False).plot(
    kind='barh', figsize=(8,6), title='Total Value by Component'
)

import matplotlib.pyplot as plt

# Ensure 'Date' is datetime
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# Extract Month
df['Month'] = df['Date'].dt.to_period('M')

# Group by Month and Type
monthly = df.groupby(['Month', 'Type'])['Value'].sum().unstack().fillna(0)

# Plot
monthly.plot(kind='line', title='Monthly Trends: Income vs Expenses', figsize=(10,6))
plt.xlabel("Month")
plt.ylabel("Amount")
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
from prophet import Prophet

# Assuming df is already loaded and 'Date' is datetime
df['Date'] = pd.to_datetime(df['Date'])

# Filter for expenses
df_spend = df[df['Type'] == 'Expense'].copy()

# Aggregate daily spending
df_prophet = df_spend.groupby('Date')['Value'].sum().reset_index()
df_prophet.columns = ['ds', 'y']

# Prophet expects positive values for forecasting, so take absolute value
df_prophet['y'] = df_prophet['y'].abs()

# Check you have enough data
print(f"Rows in prophet dataframe: {len(df_prophet)}")

if len(df_prophet) >= 2:
    model = Prophet()
    model.fit(df_prophet)

    future = model.make_future_dataframe(periods=30)
    forecast = model.predict(future)

    model.plot(forecast)
else:
    print("Not enough data to train Prophet.")

import numpy as np

def categorize(component):
    component = component.lower()
    if 'grocery' in component or 'food' in component:
        return 'Food'
    elif 'rent' in component or 'lease' in component:
        return 'Rent'
    elif 'uber' in component or 'taxi' in component:
        return 'Transport'
    elif 'netflix' in component:
        return 'Entertainment'
    else:
        return 'Other'

df['Category'] = df['Component'].apply(categorize)

# Your existing monthly_expense DataFrame
monthly_expense = df[df['Type'] == 'Expense'].groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)

# Monthly budget per category
monthly_budget = {'Food': 500, 'Rent': 1200, 'Entertainment': 200}

# Create a DataFrame with the same index and reindex columns to match monthly_expense
budget_df = pd.DataFrame([monthly_budget], index=monthly_expense.index)
budget_df = budget_df.reindex(columns=monthly_expense.columns, fill_value=0)

# Now compare
alerts = (monthly_expense > budget_df).astype(int)

print("Overspending Alerts (1 = over budget):")
print(alerts.tail())

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="Interactive Finance Dashboard", layout="wide")
st.title("Personal Finance Dashboard (Interactive)")
st.markdown("Upload your transactions CSV to explore expenses, set budgets, and get alerts.")

# --- Upload CSV ---
uploaded_file = st.file_uploader("Upload your bank CSV", type="csv")

if uploaded_file:
    # Load and clean data
    df = pd.read_csv(uploaded_file)
    df['Date'] = pd.to_datetime(df['Date'])
    df['Month'] = df['Date'].dt.to_period('M')

    # Categorize components
    def categorize(component):
        component = component.lower()
        if 'food' in component or 'grocery' in component:
            return 'Food'
        elif 'rent' in component:
            return 'Rent'
        elif 'netflix' in component or 'movie' in component:
            return 'Entertainment'
        elif 'uber' in component or 'taxi' in component:
            return 'Transport'
        else:
            return 'Other'

    df['Category'] = df['Component'].apply(categorize)

    # --- Sidebar Filters ---
    st.sidebar.header("Filters & Settings")

    categories = df['Category'].unique().tolist()
    selected_categories = st.sidebar.multiselect("Select Categories", categories, default=categories)

    selected_months = st.sidebar.slider(
        "Select Number of Months to Show",
        min_value=3, max_value=12, value=6
    )

    # Budget inputs
    st.sidebar.subheader("Set Monthly Budgets")
    budget_food = st.sidebar.number_input("Food Budget", value=500)
    budget_rent = st.sidebar.number_input("Rent Budget", value=1200)
    budget_ent = st.sidebar.number_input("Entertainment Budget", value=200)
    budget_transport = st.sidebar.number_input("Transport Budget", value=150)
    budget_other = st.sidebar.number_input("Other Budget", value=100)

    monthly_budget = {
        'Food': budget_food,
        'Rent': budget_rent,
        'Entertainment': budget_ent,
        'Transport': budget_transport,
        'Other': budget_other
    }

    # Filtered data
    filtered_df = df[df['Category'].isin(selected_categories)]

    # --- KPIs ---
    st.markdown("### Key Financial Metrics (Filtered)")
    col1, col2, col3 = st.columns(3)
    income = filtered_df[filtered_df['Type'] == 'Income']['Value'].sum()
    expense = filtered_df[filtered_df['Type'] == 'Expense']['Value'].sum()
    savings = income - expense

    col1.metric("Total Income", f"${income:,.2f}")
    col2.metric("Total Expenses", f"${expense:,.2f}")
    col3.metric("Net Savings", f"${savings:,.2f}", delta_color="inverse")

    # --- Monthly Trend ---
    st.markdown("### Monthly Income vs Expense")
    trend = filtered_df.groupby(['Month', 'Type'])['Value'].sum().unstack().fillna(0)
    st.line_chart(trend.tail(selected_months))

    # --- Budget Alert System ---
    st.markdown("### Budget Alerts")
    expense_df = filtered_df[filtered_df['Type'] == 'Expense']
    monthly_expense = expense_df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)
    budget_df = pd.DataFrame([monthly_budget], index=monthly_expense.index)
    budget_df = budget_df.reindex(columns=monthly_expense.columns, fill_value=0)
    alerts = (monthly_expense > budget_df).astype(int)

    with st.expander(" View Budget Alert Table"):
        st.dataframe(alerts.style.applymap(lambda x: "background-color: red" if x == 1 else ""), height=300)

    # --- Per Category Interactive Charts ---
    st.markdown("### Spending vs Budget (Recent Months)")
    recent_months = monthly_expense.tail(selected_months)

    for category in selected_categories:
        if category in recent_months.columns:
            st.markdown(f"**{category}**")
            fig, ax = plt.subplots(figsize=(8, 3))
            ax.plot(recent_months.index.to_timestamp(), recent_months[category], label='Actual', marker='o')
            ax.axhline(monthly_budget.get(category, 0), color='r', linestyle='--', label='Budget')
            ax.set_title(f"{category} Spend vs Budget")
            ax.legend()
            st.pyplot(fig)
else:
    st.info("Upload your transaction file to begin.")
