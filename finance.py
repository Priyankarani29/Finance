# -*- coding: utf-8 -*-
"""Finance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZhpNfUwqnOeldSIVUDjJRvTtOkejZ1p9
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Page setup
st.set_page_config(page_title="Personal Finance Dashboard", layout="wide")
st.title("Personal Finance Dashboard")
st.markdown("Upload your bank transactions CSV to explore your income, expenses, and budget alerts.")

# Upload CSV
uploaded_file = st.file_uploader("Upload your bank CSV", type="csv")

if uploaded_file:
    # Load data
    df = pd.read_csv(uploaded_file)
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df['Month'] = df['Date'].dt.to_period('M')

    # Basic component categorization
    def categorize(component):
        component = component.lower()
        if 'food' in component or 'grocery' in component:
            return 'Food'
        elif 'rent' in component:
            return 'Rent'
        elif 'netflix' in component or 'movie' in component:
            return 'Entertainment'
        elif 'uber' in component or 'taxi' in component:
            return 'Transport'
        else:
            return 'Other'

    df['Category'] = df['Component'].apply(categorize)

    # --- Sidebar filters ---
    st.sidebar.header("⚙️ Filters & Budgets")

    categories = df['Category'].unique().tolist()
    selected_categories = st.sidebar.multiselect("Select Categories", categories, default=categories)

    selected_months = st.sidebar.slider("Months to Display", 3, 12, 6)

    # Budget sliders
    st.sidebar.subheader(" Monthly Budgets")
    budget_food = st.sidebar.number_input("Food", value=500)
    budget_rent = st.sidebar.number_input("Rent", value=1200)
    budget_ent = st.sidebar.number_input("Entertainment", value=200)
    budget_trans = st.sidebar.number_input("Transport", value=150)
    budget_other = st.sidebar.number_input("Other", value=100)

    monthly_budget = {
        'Food': budget_food,
        'Rent': budget_rent,
        'Entertainment': budget_ent,
        'Transport': budget_trans,
        'Other': budget_other
    }

    # Filter data
    filtered_df = df[df['Category'].isin(selected_categories)]

    # --- KPIs ---
    st.markdown("###  Financial Summary")
    col1, col2, col3 = st.columns(3)
    income = filtered_df[filtered_df['Type'] == 'Income']['Value'].sum()
    expense = filtered_df[filtered_df['Type'] == 'Expense']['Value'].sum()
    savings = income - expense

    col1.metric("Total Income", f"${income:,.2f}")
    col2.metric("Total Expense", f"${expense:,.2f}")
    col3.metric("Net Savings", f"${savings:,.2f}", delta_color="inverse")

    # --- Monthly Trends ---
    st.markdown("###  Income vs Expense (Monthly)")
    trend = filtered_df.groupby(['Month', 'Type'])['Value'].sum().unstack().fillna(0)
    st.line_chart(trend.tail(selected_months))

    # --- Budget Alerts ---
    st.markdown("###  Budget Alerts by Category")
    expense_df = filtered_df[filtered_df['Type'] == 'Expense']
    monthly_expense = expense_df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)
    budget_df = pd.DataFrame([monthly_budget], index=monthly_expense.index)
    budget_df = budget_df.reindex(columns=monthly_expense.columns, fill_value=0)
    alerts = (monthly_expense > budget_df).astype(int)

    with st.expander(" View Alert Table"):
        st.dataframe(alerts.style.applymap(lambda v: "background-color: red" if v == 1 else ""), height=300)

    # --- Detailed Charts ---
    st.markdown("### Spend vs Budget by Category")
    recent_months = monthly_expense.tail(selected_months)

    for category in selected_categories:
        if category in recent_months.columns:
            st.subheader(f"{category}")
            fig, ax = plt.subplots(figsize=(8, 3))
            ax.plot(recent_months.index.to_timestamp(), recent_months[category], label="Actual Spend", marker='o')
            ax.axhline(monthly_budget.get(category, 0), color='r', linestyle='--', label="Budget")
            ax.set_title(f"{category} - Spend vs Budget")
            ax.legend()
            st.pyplot(fig)

else:
    st.info(" Please upload a CSV file to get started.")
