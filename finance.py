# -*- coding: utf-8 -*-
"""Finance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZhpNfUwqnOeldSIVUDjJRvTtOkejZ1p9
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

# Page configuration
st.set_page_config(page_title="Personal Finance Dashboard", layout="wide")
st.title("Personal Finance Dashboard")
st.markdown("Upload your bank CSV file to view spending insights, compare against budget, and track progress.")

# Upload CSV
uploaded_file = st.file_uploader("Upload your bank transactions CSV", type="csv")

if uploaded_file:
    # Load and preprocess
    df = pd.read_csv(uploaded_file)
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df.dropna(subset=['Date'], inplace=True)
    df['Month'] = df['Date'].dt.to_period('M')

    # Categorization logic
    def categorize(component):
        component = str(component).lower()
        if any(x in component for x in ['grocery', 'food']):
            return 'Food'
        elif 'rent' in component:
            return 'Rent'
        elif any(x in component for x in ['uber', 'taxi', 'bus']):
            return 'Transport'
        elif any(x in component for x in ['netflix', 'movie', 'tv', 'spotify']):
            return 'Entertainment'
        else:
            return 'Other'

    df['Category'] = df['Component'].apply(categorize)

    # Show preview
    st.markdown("### Uploaded Data Preview")
    st.dataframe(df[['Date', 'Type', 'Component', 'Value']].head(10))

    # Full monthly income/expense chart
    st.markdown("### Monthly Income vs Expense (All Months)")
    monthly_trend = df.groupby(['Month', 'Type'])['Value'].sum().unstack().fillna(0)
    if not monthly_trend.empty:
        st.line_chart(monthly_trend)

    # Monthly expenses by category
    expense_df = df[df['Type'] == 'Expense']
    monthly_expense = expense_df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)

    # Budget definitions
    budgets = {'Food': 500, 'Rent': 1200, 'Transport': 150, 'Entertainment': 100, 'Other': 200}

    # Month selector
    available_months = sorted(monthly_expense.index.strftime('%B %Y'))
    selected_months = st.multiselect("Select months to view detailed alerts and breakdown", available_months, default=available_months[-1:])

    # Convert selection to Period
    selected_periods = [pd.Period(m, freq='M') for m in monthly_expense.index.strftime('%B %Y') if m in selected_months]
    filtered_expense = monthly_expense.loc[monthly_expense.index.isin(selected_periods)]

    # Filtered pie chart
    st.markdown("### Spending Breakdown (Pie Chart)")
    filtered_df = df[df['Month'].isin(selected_periods) & (df['Type'] == 'Expense')]
    category_sum = filtered_df.groupby('Category')['Value'].sum()

    if not category_sum.empty:
        fig, ax = plt.subplots()
        ax.pie(category_sum, labels=category_sum.index, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        st.pyplot(fig)
    else:
        st.info("No expense data available for the selected month(s).")

    # Budget Alerts
    st.markdown("### Budget Alerts")
    alerts = []
    for month in filtered_expense.index:
        for cat in filtered_expense.columns:
            spent = filtered_expense.loc[month, cat]
            budget = budgets.get(cat, 0)
            if spent > budget:
                alerts.append(f"In {month.strftime('%B %Y')}, you spent ${spent - budget:.2f} more than your budget in **{cat}**.")

    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("You stayed within budget for the selected month(s).")

    # Summary download
    st.markdown("### Download Monthly Expense Summary (All Months)")
    summary = df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)
    buffer = BytesIO()
    summary.to_csv(buffer)
    st.download_button("Download CSV Report", buffer.getvalue(), "monthly_summary.csv", "text/csv")

else:
    st.info("Please upload a CSV with columns: Date, Type (Income/Expense), Component, and Value.")

