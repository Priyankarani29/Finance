# -*- coding: utf-8 -*-
"""Finance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZhpNfUwqnOeldSIVUDjJRvTtOkejZ1p9
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

# Page configuration
st.set_page_config(page_title="Personal Finance Dashboard", layout="wide")
st.title("Personal Finance Dashboard")
st.markdown("Upload your bank transactions CSV to analyze income, expenses, budgets, and spending alerts.")

# File uploader
uploaded_file = st.file_uploader("Upload your bank transaction CSV", type="csv")

if uploaded_file:
    # Load data
    df = pd.read_csv(uploaded_file)
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df['Month'] = df['Date'].dt.to_period('M')

    # Categorize components
    def auto_categorize(component):
        component = component.lower()
        if any(x in component for x in ['food', 'grocery', 'supermarket']):
            return 'Food'
        elif 'rent' in component:
            return 'Rent'
        elif any(x in component for x in ['netflix', 'movie', 'tv', 'entertain']):
            return 'Entertainment'
        elif any(x in component for x in ['uber', 'taxi', 'cab', 'bus']):
            return 'Transport'
        else:
            return 'Other'

    df['Category'] = df['Component'].apply(auto_categorize)

    # Sidebar filters
    st.sidebar.header("Filters and Budget Settings")

    categories = df['Category'].unique().tolist()
    selected_categories = st.sidebar.multiselect("Filter by Category", categories, default=categories)

    min_date = df['Date'].min()
    max_date = df['Date'].max()
    selected_date_range = st.sidebar.date_input("Select Date Range", [min_date, max_date])

    # Filter by category and date
    df = df[df['Category'].isin(selected_categories)]
    df = df[(df['Date'] >= pd.to_datetime(selected_date_range[0])) & (df['Date'] <= pd.to_datetime(selected_date_range[1]))]

    # Monthly budget settings
    st.sidebar.subheader("Monthly Budget (Per Category)")
    budget_inputs = {}
    for cat in sorted(categories):
        budget_inputs[cat] = st.sidebar.number_input(f"{cat} Budget", value=500 if cat == 'Food' else 200)

    # Key metrics
    st.markdown("### Financial Summary")
    col1, col2, col3 = st.columns(3)
    income = df[df['Type'] == 'Income']['Value'].sum()
    expense = df[df['Type'] == 'Expense']['Value'].sum()
    savings = income - expense
    col1.metric("Total Income", f"${income:,.2f}")
    col2.metric("Total Expense", f"${expense:,.2f}")
    col3.metric("Net Savings", f"${savings:,.2f}", delta_color="inverse")

    # Monthly income vs expense trend
    st.markdown("### Monthly Income and Expense Trends")
    monthly_trend = df.groupby(['Month', 'Type'])['Value'].sum().unstack().fillna(0)
    st.line_chart(monthly_trend)

    # Budget alert system
    st.markdown("### Budget Alerts")
    expense_df = df[df['Type'] == 'Expense']
    monthly_expense = expense_df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)

    budget_df = pd.DataFrame([budget_inputs], index=monthly_expense.index)
    budget_df = budget_df.reindex(columns=monthly_expense.columns, fill_value=0)

    alerts = (monthly_expense > budget_df).astype(int)

    with st.expander("View Alert Table"):
        st.dataframe(alerts.style.applymap(lambda x: "background-color: red" if x == 1 else ""))

    # Category-level charts
    st.markdown("### Spending vs Budget by Category")
    for category in selected_categories:
        if category in monthly_expense.columns:
            st.subheader(f"{category}")
            fig, ax = plt.subplots(figsize=(8, 3))
            ax.plot(monthly_expense.index.to_timestamp(), monthly_expense[category], label="Actual Spend", marker='o')
            ax.axhline(y=budget_inputs[category], color='red', linestyle='--', label="Budget")
            ax.set_title(f"{category} - Spend vs Budget")
            ax.legend()
            st.pyplot(fig)

    # Downloadable report
    st.markdown("### Export Monthly Summary")
    summary = df.groupby(['Month', 'Category'])['Value'].sum().unstack().fillna(0)
    buffer = BytesIO()
    summary.to_csv(buffer)
    st.download_button("Download CSV Summary", buffer.getvalue(), "monthly_summary.csv", "text/csv")
else:
    st.info("Please upload a valid CSV file to get started.")
